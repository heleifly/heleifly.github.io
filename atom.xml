<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FlowerPig</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heleifly.com/"/>
  <updated>2017-12-20T06:05:53.000Z</updated>
  <id>http://heleifly.com/</id>
  
  <author>
    <name>只不过</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式的写法</title>
    <link href="http://heleifly.com/2017/12/20/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://heleifly.com/2017/12/20/java基础/</id>
    <published>2017-12-20T06:05:53.000Z</published>
    <updated>2017-12-20T06:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="单例模式："><a href="#单例模式：" class="headerlink" title="单例模式："></a>单例模式：</h2><hr><a id="more"></a><blockquote><h3 id="懒汉模式，线程不安全"><a href="#懒汉模式，线程不安全" class="headerlink" title="懒汉模式，线程不安全"></a>懒汉模式，线程不安全</h3><pre><code class="bash">public class Singleton {  private static Singleton instance;  private <span class="function"><span class="title">Singleton</span></span> (){}  public static Singleton <span class="function"><span class="title">getInstance</span></span>() {  <span class="keyword">if</span> (instance == null) {      instance = new Singleton();  }  <span class="built_in">return</span> instance;  }  }</code></pre><h3 id="懒汉模式，线程安全"><a href="#懒汉模式，线程安全" class="headerlink" title="懒汉模式，线程安全"></a>懒汉模式，线程安全</h3><pre><code class="bash">public class Singleton {      private static Singleton instance;      private <span class="function"><span class="title">Singleton</span></span> (){}      public static synchronized Singleton <span class="function"><span class="title">getInstance</span></span>() {      <span class="keyword">if</span> (instance == null) {          instance = new Singleton();      }      <span class="built_in">return</span> instance;      }  }</code></pre><p>看起来很安全，但是效率很低，很多情况下不需要同步。</p><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><pre><code class="bash">public class Singleton {      private static Singleton instance = new Singleton();      private <span class="function"><span class="title">Singleton</span></span> (){}      public static Singleton <span class="function"><span class="title">getInstance</span></span>() {      <span class="built_in">return</span> instance;      }  }</code></pre><h3 id="饿汉模式的变异（另一种方式）"><a href="#饿汉模式的变异（另一种方式）" class="headerlink" title="饿汉模式的变异（另一种方式）"></a>饿汉模式的变异（另一种方式）</h3><pre><code class="bash">public class Singleton {      private Singleton instance = null;      static {      instance = new Singleton();      }      private <span class="function"><span class="title">Singleton</span></span> (){}      public static Singleton <span class="function"><span class="title">getInstance</span></span>() {      <span class="built_in">return</span> this.instance;      }  }</code></pre><p>   前面的三种方式都差不多，都是在类初始化即实例化instance。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><pre><code class="bash">public class Singleton {      private static class SingletonHolder {      private static final Singleton INSTANCE = new Singleton();      }      private <span class="function"><span class="title">Singleton</span></span> (){}      public static final Singleton <span class="function"><span class="title">getInstance</span></span>() {      <span class="built_in">return</span> SingletonHolder.INSTANCE;      }  }</code></pre><p>  这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是（很细微的差别）：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比第三和第四种方式就显得很合理。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><pre><code class="bash">public enum Singleton {      INSTANCE;      public void <span class="function"><span class="title">whateverMethod</span></span>() {      }  }</code></pre><p>  这种方式不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，由于1.5中才加入enum特性，普及度目前来说还不是很高</p><h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><pre><code class="bash">public class Singleton {      private volatile static Singleton singleton;      private <span class="function"><span class="title">Singleton</span></span> (){}      public static Singleton <span class="function"><span class="title">getSingleton</span></span>() {      <span class="keyword">if</span> (singleton == null) {          synchronized (Singleton.class) {          <span class="keyword">if</span> (singleton == null) {              singleton = new Singleton();          }          }      }      <span class="built_in">return</span> singleton;      }  }</code></pre><p>  在JDK1.5之后，双重检查锁定才能够正常达到单例效果。     </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;单例模式：&quot;&gt;&lt;a href=&quot;#单例模式：&quot; class=&quot;headerlink&quot; title=&quot;单例模式：&quot;&gt;&lt;/a&gt;单例模式：&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://heleifly.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="单例模式" scheme="http://heleifly.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac的一些快捷键</title>
    <link href="http://heleifly.com/2017/12/11/Mac%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://heleifly.com/2017/12/11/Mac的快捷键/</id>
    <published>2017-12-11T08:33:18.000Z</published>
    <updated>2017-12-11T08:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="MAC的快捷键的用法："><a href="#MAC的快捷键的用法：" class="headerlink" title="MAC的快捷键的用法："></a>MAC的快捷键的用法：</h2><hr><a id="more"></a><blockquote><h3 id="基本快捷键："><a href="#基本快捷键：" class="headerlink" title="基本快捷键："></a>基本快捷键：</h3></blockquote><pre><code>Command-Z 撤销　Command-X 剪切　　Command-C 拷贝（Copy）　　Command-V 粘贴　　Command-A 全选（All）　　Command-S 保存（Save)　　Command-F 查找（Find）</code></pre><blockquote><h3 id="截图："><a href="#截图：" class="headerlink" title="截图："></a>截图：</h3></blockquote><pre><code>Command-Shift-4 截取所选屏幕区域到一个文件　　Command-Shift-3 截取全部屏幕到文件　　Command-Shift-Control-3 截取全部屏幕到剪贴板　　Command-Shift-4 截取所选屏幕区域到一个文件，或按空格键仅捕捉一个窗口　　Command-Shift-Control-4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗</code></pre><blockquote><h3 id="在应用程序中："><a href="#在应用程序中：" class="headerlink" title="在应用程序中："></a>在应用程序中：</h3></blockquote><pre><code>Command-Option-esc 打开强制退出窗口　　Command-H 隐藏（Hide）当前正在运行的应用程序窗口　　Command-Option-H 隐藏（Hide）其他应用程序窗口　　Command-Q 退出（Quit）最前面的应用程序　　Command-Shift-Z 重做，也就是撤销的逆向操作　　Command-Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于Windows中（Alt+Tab）　　Command-Option-esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出</code></pre><blockquote><h3 id="idea中的快捷键："><a href="#idea中的快捷键：" class="headerlink" title="idea中的快捷键："></a>idea中的快捷键：</h3></blockquote><pre><code>alt+f7查找在哪里使用 相当于eclipse的ctrl+shift+Gcommand+alt+f7 这个是查找选中的字符在工程中出现的地方，可以不是方法变量类等，这个和上面的有区别的command＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择 ，功能基本同上选中文本，按command+shift+F7 ，高亮显示所有该文本，按Esc高亮消失。选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。shift+f3就是往上找ctrl+enter 出现生成get,set方法的界面shift+enter 换到下一行command+N 查找类command+shift+N 查找文件command+R 替换ctrl+shift+R 可以在整个工程或着某个目录下面替换变量command+Y 删除行command+D复制一行ctrl+shift+J 把多行连接成一行，会去掉空格的行command+J 可以生成一些自动代码，比如for循环command+B 找变量的来源  同F4   查找变量来源ctrl+shift+B 找变量所属的类command+G定位command+F 在当前文件里查找文本 f3向下看，shift+f3向上看ctrl+shift+F  可以在整个工程或着某个目录下面查找变量   相当于eclipse里的ctrl+Halt+shift+C 最近修改的文件command+E最近打开的文件alt+enter 导入包，自动修改command+alt+L 格式化代码command+alt+I 自动缩进，不用多次使用tab或着backspace键，也是比较方便的ctrl+shift+space代码补全，这个会判断可能用到的，这个代码补全和代码提示是不一样的command+P 方法参数提示command+alt+T 把选中的代码放在 TRY{} IF{} ELSE{} 里command+X剪切删除行command+shift+V 可以复制多个文本command+shift+U 大小写转换alt+f1查找文件所在目录位置command+/ 注释一行或着多行 //ctrl+shift+/ 注释/*...*/command+alt+左右箭头 返回上次编辑的位置shift+f6重命名command+shift+上下箭头 把代码上移或着下移command+[或]  可以跳到大括号的开头结尾command+f12可以显示当前文件的结构command+alt+B 可以导航到一个抽象方法的实现代码command+shift+小键盘的*  列编辑alt+f8 debug时选中查看值f8相当于eclipse的f6跳到下一步shift+f8相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数f7相当于eclipse的f5就是进入到代码alt+shift+f7这个是强制进入代码ctrl+shift+f9 debug运行java类ctrl+shift+f10正常运行java类command+f2停止运行</code></pre><p>  用mac有一段时间了，自己结合网上一些罗列出一些常用的快捷键。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;MAC的快捷键的用法：&quot;&gt;&lt;a href=&quot;#MAC的快捷键的用法：&quot; class=&quot;headerlink&quot; title=&quot;MAC的快捷键的用法：&quot;&gt;&lt;/a&gt;MAC的快捷键的用法：&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://heleifly.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://heleifly.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章简单加密访问</title>
    <link href="http://heleifly.com/2017/12/11/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
    <id>http://heleifly.com/2017/12/11/文章加密/</id>
    <published>2017-12-11T06:10:36.000Z</published>
    <updated>2017-12-11T06:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚接触hexo不久，也是因为最近比较闲一点，才有空闲时间研究，很多东西越研究越有趣，通过查看资料和根据自己的摸索实践之后，发现可以密码访问自己写的文章，下面就是我自己方法。</p><p>原理<br>原理很简单就是利用js的阻塞机制，比如在某一页面有alert()的时候，整个页面都会停止运行，直到你点击确定以后，页面的代码将会继续执行下去。so我就利用这样的假象去阻止页面的渲染，直到输入正确的密码才可以渲染。alert只有提示功能，没有输入功能。根据查询资料可以用promt函数</p><p>var password = promt(‘请输入文章密码’);<br>alert(password);<br>上代码<br>找到themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件。<br>按道理是添加在任何地方都行</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>,<span class="string">''</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">history.back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><p>如果你好奇page.password是什么东西，那么恭喜你，你对 Hexo 的结构还是很熟悉的。page这个变量就是你在hexo new的时候生成文件中最顶部的东西，以下我给出这篇文章的头部参考：</p><hr><pre><code class="bash">title: Hexo文章简单加密访问tags: hexocategories: <span class="string">"upUping"</span>description: 文章访问密码：mimapassword: mima</code></pre><hr><p>做的本来只是表象，属于自娱自乐</p>]]></content>
    
    <summary type="html">
    
      文章访问密码：mima
    
    </summary>
    
      <category term="upUping" scheme="http://heleifly.com/categories/upUping/"/>
    
    
      <category term="笔记" scheme="http://heleifly.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>1320</title>
    <link href="http://heleifly.com/2017/12/08/1320/"/>
    <id>http://heleifly.com/2017/12/08/1320/</id>
    <published>2017-12-08T09:48:07.000Z</published>
    <updated>2017-12-08T09:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="好戏开场了"><a href="#好戏开场了" class="headerlink" title="好戏开场了"></a>好戏开场了</h3><p>搭建好了这bolg这么久了，之前是在有道云笔记上面记录自己遇到过的一些问题。本着拿这记录些笔记和生活趣事和自己的突发奇想。1320其实就是距离。</p><hr>]]></content>
    
    <summary type="html">
    
      1320其实不知道怎么定义比较好
    
    </summary>
    
      <category term="life7788" scheme="http://heleifly.com/categories/life7788/"/>
    
    
      <category term="hexo" scheme="http://heleifly.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HashMap,LinkedHashMap,TreeMap</title>
    <link href="http://heleifly.com/2017/12/06/HashMap,LinkedHashMap,TreeMap/"/>
    <id>http://heleifly.com/2017/12/06/HashMap,LinkedHashMap,TreeMap/</id>
    <published>2017-12-06T08:44:15.000Z</published>
    <updated>2017-12-06T08:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。<br>Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。<br>Hashtable与<br> <a id="more"></a><br>HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。<br>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。<br>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p><p>一般情况下，我们用的最多的是HashMap,HashMap里面存入的键值对在取出的时候是随机的,它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度。在Map 中插入、删除和定位元素，HashMap 是最好的选择。<br>TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。<br>LinkedHashMap 是HashMap的一个子类，如果需要输出的顺序和输入的相同,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。</p><ol><li>HashSet是通过HashMap实现的,TreeSet是通过TreeMap实现的,只不过Set用的只是Map的key</li><li>Map的key和Set都有一个共同的特性就是集合的唯一性.TreeMap更是多了一个排序的功能.</li><li>hashCode和equal()是HashMap用的, 因为无需排序所以只需要关注定位和唯一性即可.<br>a. hashCode是用来计算hash值的,hash值是用来确定hash表索引的.<br>b. hash表中的一个索引处存放的是一张链表, 所以还要通过equal方法循环比较链上的每一个对象<pre><code>才可以真正定位到键值对应的Entry.</code></pre>c. put时,如果hash表中没定位到,就在链表前加一个Entry,如果定位到了,则更换Entry中的value,并返回旧value</li><li>由于TreeMap需要排序,所以需要一个Comparator为键值进行大小比较.当然也是用Comparator定位的.<br>a. Comparator可以在创建TreeMap时指定<br>b. 如果创建时没有确定,那么就会使用key.compareTo()方法,这就要求key必须实现Comparable接口.<br>c. TreeMap是使用Tree数据结构实现的,所以使用compare接口就可以完成定位了.</li></ol><p>注意：<br>1、Collection没有get()方法来取得某个元素。只能通过iterator()遍历元素。<br>2、Set和Collection拥有一模一样的接口。<br>3、List，可以通过get()方法来一次取出一个元素。使用数字来选择一堆对象中的一个，get(0)…。(add/get)<br>4、一般使用ArrayList。用LinkedList构造堆栈stack、队列queue。<br>5、Map用 put(k,v) / get(k)，还可以使用containsKey()/containsValue()来检查其中是否含有某个key/value。<br>    HashMap会利用对象的hashCode来快速找到key。<br>    hashing<br>    哈希码就是将对象的信息经过一些转变形成一个独一无二的int值，这个值存储在一个array中。<br>    我们都知道所有存储结构中，array查找速度是最快的。所以，可以加速查找。<br>    发生碰撞时，让array指向多个values。即，数组每个位置上又生成一个梿表。<br>6、Map中元素，可以将key序列、value序列单独抽取出来。<br>使用keySet()抽取key序列，将map中的所有keys生成一个Set。<br>使用values()抽取value序列，将map中的所有values生成一个Collection。<br>为什么一个生成Set，一个生成Collection？那是因为，key总是独一无二的，value允许重复。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。&lt;br&gt;Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。&lt;br&gt;Hashtable与&lt;br&gt;
    
    </summary>
    
      <category term="upUping" scheme="http://heleifly.com/categories/upUping/"/>
    
    
      <category term="笔记" scheme="http://heleifly.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://heleifly.com/2017/12/06/hello-world/"/>
    <id>http://heleifly.com/2017/12/06/hello-world/</id>
    <published>2017-12-06T08:44:15.000Z</published>
    <updated>2017-12-06T08:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
