<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>flowerPig</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heleifly.com/"/>
  <updated>2017-12-07T02:58:07.000Z</updated>
  <id>http://heleifly.com/</id>
  
  <author>
    <name>只不过</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo文章简单加密访问</title>
    <link href="http://heleifly.com/2017/12/07/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/"/>
    <id>http://heleifly.com/2017/12/07/文章加密/</id>
    <published>2017-12-07T02:58:07.000Z</published>
    <updated>2017-12-07T02:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚接触hexo不久，也是因为最近比较闲一点，才有空闲时间研究，很多东西越研究越有趣，通过查看资料和根据自己的摸索实践之后，发现可以密码访问自己写的文章，下面就是我自己方法。</p><p>原理<br>原理很简单就是利用js的阻塞机制，比如在某一页面有alert()的时候，整个页面都会停止运行，直到你点击确定以后，页面的代码将会继续执行下去。so我就利用这样的假象去阻止页面的渲染，直到输入正确的密码才可以渲染。alert只有提示功能，没有输入功能。根据查询资料可以用promt函数</p><p>var password = promt(‘请输入文章密码’);<br>alert(password);<br>上代码<br>找到themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件。<br>按道理是添加在任何地方都行</p><p><script><br>    (function(){<br>        if(‘‘){<br>            if (prompt(‘请输入文章密码’,’’) !== ‘‘){<br>                alert(‘密码错误！’);<br>                history.back();<br>            }<br>        }<br>    })();<br></script><br>如果你好奇page.password是什么东西，那么恭喜你，你对 Hexo 的结构还是很熟悉的。page这个变量就是你在hexo new的时候生成文件中最顶部的东西，以下我给出这篇文章的头部参考：</p><hr><p>title: Hexo文章简单加密访问<br>tags: hexo<br>categories: “upUping”<br>description: 文章访问密码：mima</p><h2 id="password-mima"><a href="#password-mima" class="headerlink" title="password: mima"></a>password: mima</h2><p>做的本来只是表象，属于自娱自乐</p>]]></content>
    
    <summary type="html">
    
      文章访问密码：mima
    
    </summary>
    
      <category term="upUping" scheme="http://heleifly.com/categories/upUping/"/>
    
    
      <category term="hexo" scheme="http://heleifly.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HashMap,LinkedHashMap,TreeMap</title>
    <link href="http://heleifly.com/2017/12/06/HashMap,LinkedHashMap,TreeMap/"/>
    <id>http://heleifly.com/2017/12/06/HashMap,LinkedHashMap,TreeMap/</id>
    <published>2017-12-06T08:44:15.000Z</published>
    <updated>2017-12-06T08:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。<br>Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。<br>Hashtable与<br> <a id="more"></a><br>HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。<br>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。<br>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p><p>一般情况下，我们用的最多的是HashMap,HashMap里面存入的键值对在取出的时候是随机的,它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度。在Map 中插入、删除和定位元素，HashMap 是最好的选择。<br>TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。<br>LinkedHashMap 是HashMap的一个子类，如果需要输出的顺序和输入的相同,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。</p><ol><li>HashSet是通过HashMap实现的,TreeSet是通过TreeMap实现的,只不过Set用的只是Map的key</li><li>Map的key和Set都有一个共同的特性就是集合的唯一性.TreeMap更是多了一个排序的功能.</li><li>hashCode和equal()是HashMap用的, 因为无需排序所以只需要关注定位和唯一性即可.<br>a. hashCode是用来计算hash值的,hash值是用来确定hash表索引的.<br>b. hash表中的一个索引处存放的是一张链表, 所以还要通过equal方法循环比较链上的每一个对象<pre><code>才可以真正定位到键值对应的Entry.</code></pre>c. put时,如果hash表中没定位到,就在链表前加一个Entry,如果定位到了,则更换Entry中的value,并返回旧value</li><li>由于TreeMap需要排序,所以需要一个Comparator为键值进行大小比较.当然也是用Comparator定位的.<br>a. Comparator可以在创建TreeMap时指定<br>b. 如果创建时没有确定,那么就会使用key.compareTo()方法,这就要求key必须实现Comparable接口.<br>c. TreeMap是使用Tree数据结构实现的,所以使用compare接口就可以完成定位了.</li></ol><p>注意：<br>1、Collection没有get()方法来取得某个元素。只能通过iterator()遍历元素。<br>2、Set和Collection拥有一模一样的接口。<br>3、List，可以通过get()方法来一次取出一个元素。使用数字来选择一堆对象中的一个，get(0)…。(add/get)<br>4、一般使用ArrayList。用LinkedList构造堆栈stack、队列queue。<br>5、Map用 put(k,v) / get(k)，还可以使用containsKey()/containsValue()来检查其中是否含有某个key/value。<br>    HashMap会利用对象的hashCode来快速找到key。<br>    hashing<br>    哈希码就是将对象的信息经过一些转变形成一个独一无二的int值，这个值存储在一个array中。<br>    我们都知道所有存储结构中，array查找速度是最快的。所以，可以加速查找。<br>    发生碰撞时，让array指向多个values。即，数组每个位置上又生成一个梿表。<br>6、Map中元素，可以将key序列、value序列单独抽取出来。<br>使用keySet()抽取key序列，将map中的所有keys生成一个Set。<br>使用values()抽取value序列，将map中的所有values生成一个Collection。<br>为什么一个生成Set，一个生成Collection？那是因为，key总是独一无二的，value允许重复。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。&lt;br&gt;Hashmap 是一个最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。&lt;br&gt;Hashtable与&lt;br&gt;
    
    </summary>
    
      <category term="upUping" scheme="http://heleifly.com/categories/upUping/"/>
    
    
      <category term="笔记" scheme="http://heleifly.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://heleifly.com/2017/12/06/hello-world/"/>
    <id>http://heleifly.com/2017/12/06/hello-world/</id>
    <published>2017-12-06T08:44:15.000Z</published>
    <updated>2017-12-06T08:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
